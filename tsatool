#!/bin/sh

TSA_URL=""
CERTFILE="tsa-certificates.crt"
DIGEST="sha384"
SUFFIX=".tsalog"

case "$1" in
  "init")
    shift
    ARGS=$(getopt "fh" $*) && OP=init
    ;;
  "verify")
    shift
    ARGS=$(getopt "ah" $*) && OP=verify
    ;;
  "")
    ARGS=--
    ;;
  *)
    ARGS=$(getopt "h" $*) && OP=update
    ;;
esac
set -- $ARGS

opt_all=
opt_force=
opt_verbose=   # TODO?!
while :; do
  case "$1" in
    -a) opt_all=1; shift ;;
    -f) opt_force=1; shift ;;
    -h) OP=; shift; break ;;
    --) shift; break ;;
  esac
done

if [ -z "$OP" ]; then
  cat << EOT
Usage: $0 ...
          init [-f] NEW_FILENAME...
          FILENAME...
          verify [-a] FILENAME...
EOT
  exit
fi

_join_path() { # path0 path1
  case "$2" in
    /*) printf "%s\n" "$2" ;;
    *) printf "%s/%s\n" "$1" "$2" ;;
  esac
}

# returns 0/1, RET=size
_size() { # filename
  RET=$(wc -c "$1" | { read len more; echo $len; })   # trick: strip leading whitespace
}

_head() { # file limit
  # some implementations don't like 0
  [ "$2" -eq 0 ] && return
  head -c "$2" "$1"
}

# RET=digest
_digest() { # filename [limit=]
  if [ -n "$2" ]; then
    RET=$(_head "$1" "$2" | openssl "$DIGEST" -r | cut -d' ' -f1)
    return
  fi
  RET=$(openssl "$DIGEST" -r < "$1" | cut -d' ' -f1)
}

# returns 0/1, RET=signedTimestamp(base64)
_obtain_ts() { # digestOfData
  local tempfile
  tempfile=$(mktemp) || return
  openssl ts -query "-$DIGEST" -digest "$1" -no_nonce -out "$tempfile" || { rm "$tempfile"; return 1; }
  curl -s -S -H 'Content-type: application/timestamp-query' --data-binary "@$tempfile" "$TSA_URL" -o "$tempfile" || { rm "$tempfile"; return 1; }
  openssl ts -reply -in "$tempfile" -token_out -out "$tempfile" || { rm "$tempfile"; return 1; }
  RET=$(openssl base64 -A -in "$tempfile")
  rm "$tempfile"
}

# Expects all timestamps from this TSA_URL to use the same certificates...
_do_fetch_ts_certs() { # dstfile
  local dstfile=$1
  # obtain "empty" timestamp, but with included certs
  printf "" | openssl ts -query "-$DIGEST" -cert -no_nonce -out "$dstfile" || return
  curl -s -S -H 'Content-type: application/timestamp-query' --data-binary "@$dstfile" "$TSA_URL" -o "$dstfile" || return
  openssl ts -reply -in "$dstfile" -token_out -out "$dstfile" || return
  openssl pkcs7 -inform DER -in "$dstfile" -print_certs -out "$dstfile" || return
}

_fetch_append_ts_certs() { # certfile
  local certfile=$1
  local tempfile rc
  tempfile=$(mktemp) || return
  _do_fetch_ts_certs "$tempfile"
  rc=$?
  if [ "$rc" -eq 0 ]; then
    cat "$tempfile" >> "$certfile"
  fi
  rm "$tempfile"
  return $rc
}

_get_tsr_info() { # signedTimestamp(base64) dstfile errfile
  local sts=$1 dstfile=$2 errfile=$3
  echo "$sts" | openssl base64 -A -d -out "$dstfile" || return
  openssl ts -reply -token_in -in "$dstfile" -text -out "$dstfile" 2> "$errfile"
}

# returns 0/1, RET=output
_verify_ts() { # signedTimestamp(base64) datafile certfile tempdir [limit=]
  local sts=$1 file=$2 certfile=$3 tempdir=$4 limit=$5

  echo "$sts" | openssl base64 -A -d -out "$tempdir/in" || return

  if [ -n "$limit" ]; then
    _digest "$file" "$limit" || return
    RET=$(openssl ts -verify -digest "$RET" -token_in -in "$tempdir/in" -CAfile "$certfile" -untrusted "$certfile" 2> "$tempdir/err")
    rc=$?
  else
    RET=$(openssl ts -verify -data "$file" -token_in -in "$tempdir/in" -CAfile "$certfile" -untrusted "$certfile" 2> "$tempdir/err")
    rc=$?
  fi
  grep -v "^Using configuration from" "$tempdir/err" >&2

  return $rc
}

# NOTE: prints used openssl command, but does not support limit=
_verify_ts_audit() { # signedTimestamp(base64) filename certfile
  local sts=$1 file=$2 certfile=$3
  echo "echo \"$sts\" | openssl base64 -A -d | openssl ts -verify -data \"$file\" -token_in -in /dev/stdin -CAfile \"$certfile\" -untrusted \"$certfile\""
  echo "$sts" | openssl base64 -A -d | openssl ts -verify -data "$file" -token_in -in /dev/stdin -CAfile "$certfile" -untrusted "$certfile"
}

# verify the certificate and return defined error codes:
err_verify_0="success"
err_verify_1="general processing error"   # e.g. could not create temporary file
err_verify_2="unknown error"
err_verify_3="certfile missing/empty"
err_verify_4="signer certificate not found"
err_verify_5="unable to get local issuer certificate"
err_verify_6="digest does not match"

_do_try_verify_ts() { # signedTimestamp(base64) digestOfData certfile tempdir
  local sts=$1 hash=$2 certfile=$3 tempdir=$4
  echo "$sts" | openssl base64 -A -d -out "$tempdir/in" || return 1
  RET=$(openssl ts -verify -digest "$hash" -token_in -in "$tempdir/in" -CAfile "$certfile" -untrusted "$certfile" 2> "$tempdir/err") && return 0
  grep -q "^Error loading file " "$tempdir/err" && return 3
  grep -q "no certificate or crl found" "$tempdir/err" && return 3
  grep -q "signer certificate not found" "$tempdir/err" && return 4
  grep -q "unable to get local issuer certificate" "$tempdir/err" && return 5
  grep -q "message imprint mismatch" "$tempdir/err" && return 6
  cat "$tempdir/err" >&2
  return 2
}

_try_verify_ts() { # signedTimestamp(base64) digestOfData certfile
  local tempdir rc
  [ ! -f "$certfile" ] && return 3

  tempdir=$(mktemp -d) || return 1
  _do_try_verify_ts "$1" "$2" "$3" "$tempdir"
  rc=$?
  rm -r "$tempdir"
  return $rc
}

# returns 0/1
_read_tsalog() { # filename callbackFn [allowEmpty=]    w/ invocations: callbackFn $pos $hash $signedTimestamp(base64)
  local file=$1 cb=$2 allowEmpty=$3
  local pos hash sts found=
  while read -r pos hash sts; do
    if [ -z "$pos" ] || [ "$pos" -lt "0" ] || [ -z "$hash" ] || [ -z "$sts" ]; then
      echo "Read error: $file$SUFFIX contains bad record: \"$pos\", \"$hash\", \"$sts\"" >&2
      return 1
    fi
    "$cb" "$pos" "$hash" "$sts" || return
    found=1
  done < "$1$SUFFIX"

  if [ -z "$found" ]; then
    if [ -z "$allowEmpty" ]; then
      echo "Read error: $file$SUFFIX contains no entries" >&2
      return 1
    else
      "$cb" "" "" "" || return
    fi
  fi
}

# returns 0/1
_append_tsalog() { # filename pos hash signedTimestamp(base64)
  local file=$1 pos=$2 hash=$3 sts=$4
  if [ -z "$pos" ] || [ "$pos" -lt "0" ] || [ -z "$hash" ] || [ -z "$sts" ]; then
    echo "Write error: bad record not written: \"$pos\", \"$hash\", \"$sts\"" >&2
    return 1
  elif [ -z "$file" ]; then
    echo "Write error: missing filename" >&2
    return 1
  fi

  printf "%u %s %s\n" "$pos" "$hash" "$sts" >> "$file$SUFFIX"
  if [ $? -ne 0 ]; then
    echo "Write error: $file$SUFFIX" 2>&1
    return 1
  fi
}

last_pos=
last_hash=
last_sts=
_cb_get_last() { # pos hash sts
  last_pos=$1
  last_hash=$2
  last_sts=$3
}

_cb_verify_all() { # pos hash sts   (global: file certfile tempdir)
  local pos=$1 hash=$2 sts=$3
  last_pos=$pos   # store for final append check

  printf "  %s: " "$pos"

#  _verify_ts "$sts" "$file" "$certfile" "$tempdir" "$pos" || return
  _digest "$file" "$pos" || return
  if _do_try_verify_ts "$sts" "$RET" "$certfile" "$tempdir"; then :; else
    eval echo "FAIL: \$err_verify_$?"
    return 1
  fi

#  _get_tsr_info "$sts" "$tempdir/out" "$tempdir/err" || return
  openssl ts -reply -token_in -in "$tempdir/in" -text -out "$tempdir/in" 2> "$tempdir/err"
  grep "^Time stamp: " "$tempdir/in"
}

# returns 0/2...
_init() { # filename
  local file=$1

  printf "" >> "$file"
  printf "" >> "$file$SUFFIX"
  _update "$file" 1
}

# returns 0/2...
_update() { # filename [internalInit=]
  local file=$1 internalInit=$2
  local new_size new_hash
  local last_pos last_hash last_sts
  local old_hash
  local certfile=$(_join_path "$(dirname -- "$file")" "$CERTFILE")

  # 1. get size and compute complete hash of "$file"
  _size "$file" || return
  new_size=$RET

  _digest "$file" || return
  new_hash=$RET

  # safety check
  _size "$file" || return
  if [ "$RET" -ne "$new_size" ]; then
    echo "ERROR: unexpected size change of $file" >&2
    return 1
  fi
  [ -n "$opt_verbose" ] && echo "new size: $new_size, new_hash: $new_hash"

  # 2. load last record from "$file$SUFFIX"
  _read_tsalog "$file" _cb_get_last "$internalInit" || return
  # _cb_get_last has populated $last_pos, $last_hash and $last_sts
  [ -n "$opt_verbose" ] && echo "last_pos: $last_pos, last_hash: $last_hash, last_sts: $last_sts"

  # 3. when unchanged, done
  if [ "$last_hash" = "$new_hash" ] && [ "$last_pos" -eq "$new_size" ]; then
    echo "DONE: $file unchanged"
    return 0
  fi

  if [ -n "$last_pos" ]; then  # i.e. not during initialInit
    # 4. compute partial hash (until $last_pos) of "$file"
    _digest "$file" "$last_pos" || return
    old_hash=$RET

    # 5. verify integrity against stored last_hash
    if [ "$old_hash" != "$last_hash" ]; then
      echo "CORRUPT: $file stored hash \"$last_hash\" does not match hash up to $last_pos: $old_hash" >&2
      return 1
    fi
  elif [ -z "$internalInit" ]; then
    echo "BUG" >&2
  fi

  # 6. obtain timestamp for $new_hash
  _obtain_ts "$new_hash" || return
  new_sts=$RET

  # 7a. try to verify timestamp against our certificate store; inspect returned errors
  _try_verify_ts "$new_sts" "$new_hash" "$certfile"
  case "$?" in
    0) # success
      [ -n "$opt_verbose" ] && echo "$RET"
      ;;

    [345])
      # 7b. fetch certificates from TSA and append to $certfile
      _fetch_append_ts_certs "$certfile" || return
      # try again
      if _try_verify_ts "$new_sts" "$new_hash" "$certfile"; then
        [ -n "$opt_verbose" ] && echo "$RET"
      else
        eval echo "Verify error: \$err_verify_$?"
        return 1
      fi
      ;;

    *)
      eval echo "Verify error: \$err_verify_$?"
      return 1
      ;;
  esac


  # 8. append to log
  _append_tsalog "$file" "$new_size" "$new_hash" "$new_sts" || return

  echo "DONE: $file"
}

_do_verify() { # filename tempdir
  local file=$1 tempdir=$2
  local last_pos last_hash last_sts
  local size
  local certfile=$(_join_path "$(dirname -- "$file")" "$CERTFILE")

  if [ -n "$opt_all" ]; then
    printf "%s:\n" "$file"

    # _cb_verify_all expects $file $certfile $tempdir !
    _read_tsalog "$file" _cb_verify_all || return

    _size "$file" || return
    echo "  $RET -- EOF --"
    echo

  else
    _read_tsalog "$file" _cb_get_last || return
    # _cb_get_last has populated $last_pos, $last_hash and $last_sts

    _size "$file" || return
    size=$RET

    printf "%s: " "$file"
    if [ "$size" -eq "$last_pos" ]; then
      _verify_ts "$last_sts" "$file" "$certfile" "$tempdir" || return
#      _verify_ts_audit "$last_sts" "$file" "$certfile" || return; RET=
    else
      _verify_ts "$last_sts" "$file" "$certfile" "$tempdir" "$last_pos" || return
      echo "NOTE: $file has been appended to since last timestamp (size now $size vs. $last_pos)"
    fi

    _get_tsr_info "$last_sts" "$tempdir/out" "$tempdir/err" || return
    if [ -n "$opt_verbose" ]; then
      echo "$RET"
      cat "$tempdir/out"
    else
      printf "%s, " "$RET"
      grep "^Time stamp: " "$tempdir/out"
    fi

    echo
  fi
}

# returns 0/1...
_verify() { # filename
  local tempdir rc

  tempdir=$(mktemp -d) || return 1
  _do_verify "$1" "$tempdir"
  rc=$?
  rm -r "$tempdir"
  return $rc
}

case $OP in
  init)
    error=
    for file; do
      if [ -e "$file" ]; then
        if [ -z "$opt_force" ]; then
          echo "$file already exists" >&2
          error=1
        fi

      elif [ -e "$file$SUFFIX" ]; then
        echo "$file$SUFFIX already exists" >&2
      fi
    done

    if [ -n "$error" ]; then
      echo "Aborting." >&2
      exit $error
    fi

    error=
    for file; do
      _init "$file" || error=1
    done
    exit $error
    ;;

  update)
    error=
    for file; do
      if [ ! -f "$file" ]; then
        echo "SKIP: $file does not exist" >&2
        error=1
        continue

      elif [ ! -f "$file$SUFFIX" ]; then
        base=${file%$SUFFIX}
        if [ "$base" = "$file" ] || [ ! -f "$base" ]; then
          echo "SKIP: $file$SUFFIX does not exist (not initialized?)" >&2
          error=1
          continue
        fi

        # when $file ends with $SUFFIX and $file w/o $SUFFIX exists, use that
        # (useful for: tsatool *.tsalog)
        file=$base
      fi

      _update "$file" || error=1
    done
    exit $error
    ;;

  verify)
    error=
    for file; do
      if [ ! -f "$file" ]; then
        echo "ERROR: $file does not exist / is not a file" >&2
        error=1
        continue

      elif [ ! -f "$file$SUFFIX" ]; then
        base=${file%$SUFFIX}
        if [ "$base" = "$file" ] || [ ! -f "$base" ]; then
          echo "ERROR: $file$SUFFIX does not exist" >&2
          error=1
          continue
        fi

        file=$base
      fi

      _verify "$file" || exit
    done
    exit $error
    ;;
esac

